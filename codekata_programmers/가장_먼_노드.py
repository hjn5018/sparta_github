"""
n = 6
vertex = [[3, 6], [4, 3], [3, 2], [1, 3], [1, 2], [2, 4], [5, 2]]
return = 3
"""

# 1번에서 출발한다.
# 연결된 m개의 노드가 있다.
# m개 중 하나의 노드를 방문한다.

# 방문한 임의의 노드와 연결된 l개의 노드가 있다. (l개의 노드 중 1번 노드가 포함되어있다.)
# l개 중 하나의 노드를 방문한다.
#  (
#  이 때 이미 방문한 1번은 가지 않는다.
#  -> 출발할 때 visited에 1을 append한다.
#  그리고 m개 중 하나의 노드인 임의노드에 방문했을 때 visited에 해당 노드를 append한다.
#  )

# 이 경우 두 가지의 경우가 있다.
# 1. 두 단계를 거쳐서 간 임의 노드가 거리가 2이다.
# 2. 사실 그냥 갈 수 있는 m개의 노드 중 하나였다.

# 그렇다면 일단 m개의 노드를 다 방문해놓는 게 나을 것 같다.??????

def solution(n, edge):
    answer = 0
    return answer

