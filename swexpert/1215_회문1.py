# "기러기", "토마토", "스위스"와 같이 똑바로 읽어도 거꾸로 읽어도 똑같은 문장이나 낱말을 회문(回文, palindrome)이라 한다.
# 8x8 평면 글자판에서 제시된 길이를 가진 회문의 개수를 구하라.

# [제약 사항]
# 각 칸의 들어가는 글자는 'A', 'B', 'C' 중 하나이다.
# ABA도 회문이며, ABBA도 회문이다. A 또한 길이 1짜리 회문이다.
# 가로 또는 세로로 이어진 회문의 개수만 센다.
# 아래 그림에서 노란색 경로를 따라가면 길이 7짜리 회문이 되지만 직선이 아니기 때문에 인정되지 않는다.

# [입력]
# 총 10개의 테스트 케이스가 주어진다.
# 각 테스트 케이스의 첫 번째 줄에는 찾아야 하는 회문의 길이가 주어지며, 다음 줄에 8x8 크기의 글자판이 주어진다.

# [출력]

# #부호와 함께 테스트 케이스의 번호를 출력하고, 공백 문자 후 찾은 회문의 개수를 출력한다.

# 입력
# 4
# CBBCBAAB
# CCCBABCB
# CAAAACAB
# BACCCCAC
# AABCBBAC
# ACAACABC
# BCCBAABC
# ABBBCCAA
# 4
# BCBBCACA
# BCAAACAC
# ABACBCCB
# AACBCBCA
# ACACBAAA
# ACCACCCB
# AACAAABA
# CACCABCB

# 출력
#1 12
#2 10
# =============================================================================================
for j, k in enumerate(range(10), 1): # 테스트 케이스 10개 받기 // 몇 번인지 enumerate하기
    pal_len = int(input()) # palindrome_length
    for i in range(8): # 한 줄씩받는 input 8번 수행하기
        pane_line = input()
# for i, j in enumerate(range(8), 1): # 인덱스가 필요할 때 enumerate 활용해보기
#     pane_line = input()

# 회문 찾는 코드 작성해보기 -> 글자 크기 4인 str을 먼저 지정해줘야함.
    if str_ == str_[::-1]:
        print("찾았다!")

# 테스트 케이스의 번호를 출력해야하는데, 회문이 없는 테스트 케이스가 있을 수 있다.
# skip할 때는??

# 테스트 케이스의 번호를 출력하는 코드를 작성해보자. -> 위에서 for enumerate했음 // for문 안에 들어가야 계속 출력
    print('#j', '회문의 개수') 

# =====================대강 짜기도 힘드네..........===============================================
# 개선해야할 점
# 입력을 다 받고나서 탐색을 해야하는데, 그러려면 각 글자판에 번호를 매겨주어야한다.
# -> 최상단의 enumerate(j)로 해결이 되는지 확인해야함.

# 각 글자판에 대해 탐색을 해야하는데, 가로뿐만이 아닌 세로도 탐색해야함.
# str_은 가로인데.. 세로의 str_2를 따로 정의해줘야함...

# 글자크기 4인 str을 지정하는 방법은??
# len()??????????????????
# ===========================================
일단 입력 하나만 받아서 해보자...